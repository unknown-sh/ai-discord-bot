services:
  # Discord client service
  discord-client:
    build:
      context: ../
      dockerfile: discord-client/Dockerfile
    env_file:
      - ../.env
    depends_on:
      - ai-gateway
      - mcp-memory
    restart: unless-stopped
    volumes:
      - ../logs:/app/logs  # Optional: for file logging if LOG_FILE is set to logs/

  # AI gateway service
  ai-gateway:
    build:
      context: ..
      dockerfile: Dockerfile.ai-gateway
    env_file:
      - ../.env
    environment:
      PYTHONPATH: /app:/app/mcp_server:/app/common:/app/config_engine
    # volumes:
    #   - ../config_engine:/app/config_engine
    #   - ../ai_gateway:/app/ai_gateway
    #   - ../mcp_server:/app/mcp_server
    ports:
      - "8000:8000"
    depends_on:
      - mcp-memory
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    volumes:
      - ../logs:/app/logs  # Optional: for file logging if LOG_FILE is set to logs/

  # MCP Memory API service
  mcp-memory:
    build:
      context: ..
      dockerfile: Dockerfile.mcp-memory
    env_file:
      - ../.env
    ports:
      - "8001:8001"
    restart: unless-stopped
    volumes:
      - ../logs:/app/logs  # Optional: for file logging if LOG_FILE is set to logs/

  # MCP Server (handles MCP API endpoints)
  mcp-server:
    build:
      context: ..
      dockerfile: mcp_server/Dockerfile
    env_file:
      - ../.env
    ports:
      - "8002:8001"
    restart: unless-stopped
    environment:
      PYTHONPATH: /app:/app/mcp_server:/app/common:/app/config_engine
    depends_on:
      - mcp-memory
    volumes:
      - ../logs:/app/logs

# Define a default network for inter-service communication
networks:
  default:
    name: ai_discord_bot_network
    driver: bridge